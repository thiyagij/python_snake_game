name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  packages: write

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with pytest
        run: |
          pytest test_game.py -v --cov=snake_game --cov-report=xml --cov-report=term

      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build package
        run: poetry build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-package
          path: dist/
          retention-days: 30

  publish-package:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry for GitHub Packages
        run: |
          poetry config repositories.github https://maven.pkg.github.com/${{ github.repository }}
          poetry config http-basic.github ${{ github.actor }} ${{ secrets.GITHUB_TOKEN }}

      - name: Build and publish
        run: |
          poetry build
          poetry publish -r github

  deploy-pages:
    name: Deploy Documentation to GitHub Pages
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create documentation site
        run: |
          mkdir -p docs
          cp README.md docs/index.md
          cp GAMEPLAY.md docs/gameplay.md
          cp QUICKSTART.md docs/quickstart.md
          
          # Create a simple index.html
          cat > docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Python Snake Game</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;
                line-height: 1.6;
                max-width: 900px;
                margin: 0 auto;
                padding: 20px;
                background: #f6f8fa;
              }
              .container {
                background: white;
                padding: 40px;
                border-radius: 6px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.12);
              }
              h1 {
                color: #24292e;
                border-bottom: 1px solid #e1e4e8;
                padding-bottom: 10px;
              }
              .links {
                display: flex;
                gap: 20px;
                margin: 30px 0;
              }
              .link-card {
                flex: 1;
                padding: 20px;
                background: #f6f8fa;
                border-radius: 6px;
                text-decoration: none;
                color: #24292e;
                transition: transform 0.2s;
              }
              .link-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
              }
              .link-card h3 {
                margin-top: 0;
                color: #0366d6;
              }
              code {
                background: #f6f8fa;
                padding: 2px 6px;
                border-radius: 3px;
                font-family: 'SFMono-Regular', Consolas, monospace;
              }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>üêç Python Snake Game</h1>
              <p>A classic 2D Snake game implementation that runs entirely in the terminal using Python's curses library.</p>
              
              <div class="links">
                <a href="https://github.com/thiyagij/python_snake_game" class="link-card">
                  <h3>üì¶ GitHub Repository</h3>
                  <p>View the source code and contribute</p>
                </a>
                <a href="gameplay.html" class="link-card">
                  <h3>üéÆ Gameplay Guide</h3>
                  <p>Learn how to play and master the game</p>
                </a>
                <a href="quickstart.html" class="link-card">
                  <h3>üöÄ Quick Start</h3>
                  <p>Get started in minutes</p>
                </a>
              </div>
              
              <h2>Features</h2>
              <ul>
                <li>Terminal-based graphics using curses library</li>
                <li>Smooth snake movement with arrow key controls</li>
                <li>Score tracking with high score persistence</li>
                <li>Collision detection for walls and self</li>
                <li>Cross-platform support (Windows, macOS, Linux)</li>
              </ul>
              
              <h2>Quick Start</h2>
              <pre><code>git clone https://github.com/thiyagij/python_snake_game.git
cd python_snake_game
pip install -r requirements.txt
python snake_game.py</code></pre>
            </div>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
